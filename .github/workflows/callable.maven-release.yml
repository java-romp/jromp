name: Maven Release

on:
  workflow_call:
    inputs:
      type:
        description: 'Release type'
        required: true
        type: string

jobs:
  release:
    name: Maven release
    runs-on: ubuntu-latest

    steps:
      - name: Validate 'Release Type' param
        env:
          TYPE: ${{ inputs.type }}
        run: |
          valid_types=(major minor patch)
          if [[ ! ${valid_types[*]} =~ "$TYPE" ]]; then
            echo "Unknown release type: $TYPE"
            exit 1
          fi

      - name: Checkout project sources ('main' branch)
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.CI_GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch all history so that Maven can create tags

      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'
          gpg-private-key: ${{ secrets.GPG_SIGNING_KEY }}

      - name: Get current version
        run: |
          echo "current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Determine version type
        env:
          TYPE: ${{ inputs.type }}
          VERSION: ${{ env.current_version }}
        run: |
          export major=$(echo "${VERSION}" | cut -d. -f1)
          export minor=$(echo "${VERSION}" | cut -d. -f2)
          export patch=$(echo "${VERSION}" | cut -d. -f3 | cut -d- -f1)
          echo "resolved: ${major}.${minor}.${patch}"

          if [[ "$TYPE" == "major" ]]; then
            echo "new_version=$((major+1)).0.0" >> $GITHUB_ENV
            echo "new_snapshot_version=$((major+1)).0.1-SNAPSHOT" >> $GITHUB_ENV
          elif [ "$TYPE" == "minor" ]; then
            echo "new_version=${major}.$((minor+1)).0" >> $GITHUB_ENV
            echo "new_snapshot_version=${major}.$((minor+1)).1-SNAPSHOT" >> $GITHUB_ENV
          else # "$TYPE" == "patch"
            echo "new_version=${major}.${minor}.${patch}" >> $GITHUB_ENV
            echo "new_snapshot_version=${major}.${minor}.$((patch+1))-SNAPSHOT" >> $GITHUB_ENV
          fi

      - name: Set git config 'user.name' and 'user.email'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Prepare release
        run: |
          echo "Type: ${{ inputs.type }}"
          echo "Current version: ${{ env.current_version }}"
          echo "New version: ${{ env.new_version }}"
          echo "New snapshot version: ${{ env.new_snapshot_version }}"
          echo "Updating project version..."
          mvn release:prepare -B -s $GITHUB_WORKSPACE/.github/settings/settings.xml \
            -DreleaseVersion=${{ env.new_version }} -DdevelopmentVersion=${{ env.new_snapshot_version }}
        env:
          CENTRAL_USERNAME: ${{ secrets.CENTRAL_USERNAME }}
          CENTRAL_PASSWORD: ${{ secrets.CENTRAL_PASSWORD }}
          GPG_SIGNING_PASSPHRASE: ${{ secrets.GPG_SIGNING_PASSPHRASE }}
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
